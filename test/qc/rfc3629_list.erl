%%% Do not modify this file, it is automatically generated by abnfc.
%%% All changes will be lost when it is regenerated.
%%% Generated by abnfc_gen on 2013-03-30 18:32:07

-module(rfc3629_list).

-ifdef('QC').

-include_lib("qc/include/qc.hrl").

-endif.

-export([names/0]).

-export(['UTF8-1'/0, 'UTF8-2'/0, 'UTF8-3'/0, 'UTF8-4'/0,
	 'UTF8-char'/0, 'UTF8-octets'/0, 'UTF8-tail'/0,
	 decode/2]).

-ifdef('QC').

-export(['UTF8-1_generator'/1, 'UTF8-2_generator'/1,
	 'UTF8-3_generator'/1, 'UTF8-4_generator'/1,
	 'UTF8-char_generator'/1, 'UTF8-octets_generator'/1,
	 'UTF8-tail_generator'/1, generator/1]).

-endif.

-include("rfc3629_list.hrl").

names() ->
    ['UTF8-octets', 'UTF8-char', 'UTF8-1', 'UTF8-2',
     'UTF8-3', 'UTF8-4', 'UTF8-tail'].

decode('UTF8-octets', Str) -> ('UTF8-octets'())(Str);
decode('UTF8-char', Str) -> ('UTF8-char'())(Str);
decode('UTF8-1', Str) -> ('UTF8-1'())(Str);
decode('UTF8-2', Str) -> ('UTF8-2'())(Str);
decode('UTF8-3', Str) -> ('UTF8-3'())(Str);
decode('UTF8-4', Str) -> ('UTF8-4'())(Str);
decode('UTF8-tail', Str) -> ('UTF8-tail'())(Str).

-ifdef('QC').

generator('UTF8-octets') -> 'UTF8-octets_generator'(0);
generator('UTF8-char') -> 'UTF8-char_generator'(0);
generator('UTF8-1') -> 'UTF8-1_generator'(0);
generator('UTF8-2') -> 'UTF8-2_generator'(0);
generator('UTF8-3') -> 'UTF8-3_generator'(0);
generator('UTF8-4') -> 'UTF8-4_generator'(0);
generator('UTF8-tail') -> 'UTF8-tail_generator'(0).

-endif.

'UTF8-octets'() ->
    '__repeat'(0, infinity, 'UTF8-char'()).

'UTF8-char'() ->
    '__alt'(['UTF8-1'(), 'UTF8-2'(), 'UTF8-3'(),
	     'UTF8-4'()]).

'UTF8-1'() ->
    fun ([C | Tl]) when (C >= 0) and (C =< 127) ->
	    {ok, C, Tl};
	(_) -> fail
    end.

'UTF8-2'() ->
    '__seq'([fun ([C | Tl])
		     when (C >= 194) and (C =< 223) ->
		     {ok, C, Tl};
		 (_) -> fail
	     end,
	     'UTF8-tail'()]).

'UTF8-3'() ->
    '__alt'(['__seq'([fun ([224 | Tl]) -> {ok, 224, Tl};
			  (_) -> fail
		      end,
		      fun ([C | Tl]) when (C >= 160) and (C =< 191) ->
			      {ok, C, Tl};
			  (_) -> fail
		      end,
		      'UTF8-tail'()]),
	     '__seq'([fun ([C | Tl])
			      when (C >= 225) and (C =< 236) ->
			      {ok, C, Tl};
			  (_) -> fail
		      end,
		      '__repeat'(2, 2, 'UTF8-tail'())]),
	     '__seq'([fun ([237 | Tl]) -> {ok, 237, Tl};
			  (_) -> fail
		      end,
		      fun ([C | Tl]) when (C >= 128) and (C =< 159) ->
			      {ok, C, Tl};
			  (_) -> fail
		      end,
		      'UTF8-tail'()]),
	     '__seq'([fun ([C | Tl])
			      when (C >= 238) and (C =< 239) ->
			      {ok, C, Tl};
			  (_) -> fail
		      end,
		      '__repeat'(2, 2, 'UTF8-tail'())])]).

'UTF8-4'() ->
    '__alt'(['__seq'([fun ([240 | Tl]) -> {ok, 240, Tl};
			  (_) -> fail
		      end,
		      fun ([C | Tl]) when (C >= 144) and (C =< 191) ->
			      {ok, C, Tl};
			  (_) -> fail
		      end,
		      '__repeat'(2, 2, 'UTF8-tail'())]),
	     '__seq'([fun ([C | Tl])
			      when (C >= 241) and (C =< 243) ->
			      {ok, C, Tl};
			  (_) -> fail
		      end,
		      '__repeat'(3, 3, 'UTF8-tail'())]),
	     '__seq'([fun ([244 | Tl]) -> {ok, 244, Tl};
			  (_) -> fail
		      end,
		      fun ([C | Tl]) when (C >= 128) and (C =< 143) ->
			      {ok, C, Tl};
			  (_) -> fail
		      end,
		      '__repeat'(2, 2, 'UTF8-tail'())])]).

'UTF8-tail'() ->
    fun ([C | Tl]) when (C >= 128) and (C =< 191) ->
	    {ok, C, Tl};
	(_) -> fail
    end.

-ifdef('QC').

'UTF8-1_generator'(Depth) when Depth >= 0 ->
    ?'LET'(V2, (?'LET'(V1, (choose(0, 127)), V1)), V2).

'UTF8-2_generator'(Depth) when Depth >= 0 ->
    ?'LET'(V4,
	   (?'LET'(V3,
		   ('__seq_generator'([?'LET'(V1, (choose(194, 223)), V1),
				       ?'SIZED'(V2,
						(resize(erlang:round(math:sqrt(V2)),
							'UTF8-tail_generator'(Depth + 1))))])),
		   V3)),
	   V4).

'UTF8-3_generator'(Depth) when Depth >= 0 ->
    ?'LET'(V34,
	   (?'LET'(V33,
		   ('__terminals_oneof_generator'(Depth, 10,
						  [?'LET'(V20,
							  ('__seq_generator'([?'LET'(V17, 224,
										     V17),
									      ?'LET'(V18,
										     (choose(160,
											     191)),
										     V18),
									      ?'SIZED'(V19,
										       (resize(erlang:round(math:sqrt(V19)),
											       'UTF8-tail_generator'(Depth
														       +
														       1))))])),
							  V20),
						   ?'LET'(V24,
							  ('__seq_generator'([?'LET'(V21,
										     (choose(225,
											     236)),
										     V21),
									      ?'LET'(V23,
										     ('__repeat_generator'(2,
													   2,
													   ?'SIZED'(V22,
														    (resize(erlang:round(math:sqrt(V22)),
															    'UTF8-tail_generator'(Depth
																		    +
																		    1)))))),
										     V23)])),
							  V24),
						   ?'LET'(V28,
							  ('__seq_generator'([?'LET'(V25, 237,
										     V25),
									      ?'LET'(V26,
										     (choose(128,
											     159)),
										     V26),
									      ?'SIZED'(V27,
										       (resize(erlang:round(math:sqrt(V27)),
											       'UTF8-tail_generator'(Depth
														       +
														       1))))])),
							  V28),
						   ?'LET'(V32,
							  ('__seq_generator'([?'LET'(V29,
										     (choose(238,
											     239)),
										     V29),
									      ?'LET'(V31,
										     ('__repeat_generator'(2,
													   2,
													   ?'SIZED'(V30,
														    (resize(erlang:round(math:sqrt(V30)),
															    'UTF8-tail_generator'(Depth
																		    +
																		    1)))))),
										     V31)])),
							  V32)],
						  [?'LET'(V4,
							  ('__seq_generator'([?'LET'(V1, 224,
										     V1),
									      ?'LET'(V2,
										     (choose(160,
											     191)),
										     V2),
									      ?'SIZED'(V3,
										       (resize(erlang:round(math:sqrt(V3)),
											       'UTF8-tail_generator'(Depth
														       +
														       1))))])),
							  V4),
						   ?'LET'(V8,
							  ('__seq_generator'([?'LET'(V5,
										     (choose(225,
											     236)),
										     V5),
									      ?'LET'(V7,
										     ('__repeat_generator'(2,
													   2,
													   ?'SIZED'(V6,
														    (resize(erlang:round(math:sqrt(V6)),
															    'UTF8-tail_generator'(Depth
																		    +
																		    1)))))),
										     V7)])),
							  V8),
						   ?'LET'(V12,
							  ('__seq_generator'([?'LET'(V9, 237,
										     V9),
									      ?'LET'(V10,
										     (choose(128,
											     159)),
										     V10),
									      ?'SIZED'(V11,
										       (resize(erlang:round(math:sqrt(V11)),
											       'UTF8-tail_generator'(Depth
														       +
														       1))))])),
							  V12),
						   ?'LET'(V16,
							  ('__seq_generator'([?'LET'(V13,
										     (choose(238,
											     239)),
										     V13),
									      ?'LET'(V15,
										     ('__repeat_generator'(2,
													   2,
													   ?'SIZED'(V14,
														    (resize(erlang:round(math:sqrt(V14)),
															    'UTF8-tail_generator'(Depth
																		    +
																		    1)))))),
										     V15)])),
							  V16)])),
		   V33)),
	   V34).

'UTF8-4_generator'(Depth) when Depth >= 0 ->
    ?'LET'(V30,
	   (?'LET'(V29,
		   ('__terminals_oneof_generator'(Depth, 10,
						  [?'LET'(V19,
							  ('__seq_generator'([?'LET'(V15, 240,
										     V15),
									      ?'LET'(V16,
										     (choose(144,
											     191)),
										     V16),
									      ?'LET'(V18,
										     ('__repeat_generator'(2,
													   2,
													   ?'SIZED'(V17,
														    (resize(erlang:round(math:sqrt(V17)),
															    'UTF8-tail_generator'(Depth
																		    +
																		    1)))))),
										     V18)])),
							  V19),
						   ?'LET'(V23,
							  ('__seq_generator'([?'LET'(V20,
										     (choose(241,
											     243)),
										     V20),
									      ?'LET'(V22,
										     ('__repeat_generator'(3,
													   3,
													   ?'SIZED'(V21,
														    (resize(erlang:round(math:sqrt(V21)),
															    'UTF8-tail_generator'(Depth
																		    +
																		    1)))))),
										     V22)])),
							  V23),
						   ?'LET'(V28,
							  ('__seq_generator'([?'LET'(V24, 244,
										     V24),
									      ?'LET'(V25,
										     (choose(128,
											     143)),
										     V25),
									      ?'LET'(V27,
										     ('__repeat_generator'(2,
													   2,
													   ?'SIZED'(V26,
														    (resize(erlang:round(math:sqrt(V26)),
															    'UTF8-tail_generator'(Depth
																		    +
																		    1)))))),
										     V27)])),
							  V28)],
						  [?'LET'(V5,
							  ('__seq_generator'([?'LET'(V1, 240,
										     V1),
									      ?'LET'(V2,
										     (choose(144,
											     191)),
										     V2),
									      ?'LET'(V4,
										     ('__repeat_generator'(2,
													   2,
													   ?'SIZED'(V3,
														    (resize(erlang:round(math:sqrt(V3)),
															    'UTF8-tail_generator'(Depth
																		    +
																		    1)))))),
										     V4)])),
							  V5),
						   ?'LET'(V9,
							  ('__seq_generator'([?'LET'(V6,
										     (choose(241,
											     243)),
										     V6),
									      ?'LET'(V8,
										     ('__repeat_generator'(3,
													   3,
													   ?'SIZED'(V7,
														    (resize(erlang:round(math:sqrt(V7)),
															    'UTF8-tail_generator'(Depth
																		    +
																		    1)))))),
										     V8)])),
							  V9),
						   ?'LET'(V14,
							  ('__seq_generator'([?'LET'(V10, 244,
										     V10),
									      ?'LET'(V11,
										     (choose(128,
											     143)),
										     V11),
									      ?'LET'(V13,
										     ('__repeat_generator'(2,
													   2,
													   ?'SIZED'(V12,
														    (resize(erlang:round(math:sqrt(V12)),
															    'UTF8-tail_generator'(Depth
																		    +
																		    1)))))),
										     V13)])),
							  V14)])),
		   V29)),
	   V30).

'UTF8-char_generator'(Depth) when Depth >= 0 ->
    ?'LET'(V10,
	   (?'LET'(V9,
		   ('__terminals_oneof_generator'(Depth, 10,
						  [?'SIZED'(V5,
							    (resize(erlang:round(math:sqrt(V5)),
								    'UTF8-1_generator'(Depth +
											 1)))),
						   ?'SIZED'(V6,
							    (resize(erlang:round(math:sqrt(V6)),
								    'UTF8-2_generator'(Depth +
											 1)))),
						   ?'SIZED'(V7,
							    (resize(erlang:round(math:sqrt(V7)),
								    'UTF8-3_generator'(Depth +
											 1)))),
						   ?'SIZED'(V8,
							    (resize(erlang:round(math:sqrt(V8)),
								    'UTF8-4_generator'(Depth +
											 1))))],
						  [?'SIZED'(V1,
							    (resize(erlang:round(math:sqrt(V1)),
								    'UTF8-1_generator'(Depth +
											 1)))),
						   ?'SIZED'(V2,
							    (resize(erlang:round(math:sqrt(V2)),
								    'UTF8-2_generator'(Depth +
											 1)))),
						   ?'SIZED'(V3,
							    (resize(erlang:round(math:sqrt(V3)),
								    'UTF8-3_generator'(Depth +
											 1)))),
						   ?'SIZED'(V4,
							    (resize(erlang:round(math:sqrt(V4)),
								    'UTF8-4_generator'(Depth +
											 1))))])),
		   V9)),
	   V10).

'UTF8-octets_generator'(Depth) when Depth >= 0 ->
    ?'LET'(V3,
	   (?'LET'(V2,
		   ('__repeat_generator'(0, infinity,
					 ?'SIZED'(V1,
						  (resize(erlang:round(math:sqrt(V1)),
							  'UTF8-char_generator'(Depth +
										  1)))))),
		   V2)),
	   V3).

'UTF8-tail_generator'(Depth) when Depth >= 0 ->
    ?'LET'(V2, (?'LET'(V1, (choose(128, 191)), V1)), V2).

-endif.

'__alt'(Ps) -> fun (T) -> '__do_alt'(Ps, T) end.

'__do_alt'([P | Ps], T) ->
    case P(T) of
      {ok, _R, _T1} = Res -> Res;
      fail -> '__do_alt'(Ps, T)
    end;
'__do_alt'([], _) -> fail.

'__repeat'(Min, Max, P) -> '__repeat'(Min, Max, P, 0).

'__repeat'(Min, Max, P, Found) ->
    fun (T) -> '__do_repeat'(Min, Max, P, Found, T) end.

'__do_repeat'(Min, Max, P, Found, T) ->
    case P(T) of
      {ok, R1, T1} when Max == Found + 1 -> {ok, [R1], T1};
      {ok, R1, T1} ->
	  case '__do_repeat'(Min, Max, P, Found + 1, T1) of
	    {ok, R2, T2} -> {ok, [R1 | R2], T2};
	    fail when Found >= Min -> {ok, [R1], T1};
	    fail -> fail
	  end;
      fail when Found >= Min -> {ok, [], T};
      fail -> fail
    end.

'__seq'(Ps) -> fun (T) -> '__do_seq'(Ps, T) end.

'__do_seq'([P | Ps], T) ->
    case P(T) of
      {ok, R1, T1} ->
	  case '__do_seq'(Ps, T1) of
	    {ok, R2, T2} -> {ok, [R1 | R2], T2};
	    fail -> fail
	  end;
      fail -> fail
    end;
'__do_seq'([], T) -> {ok, [], T}.

-ifdef('QC').

'__repeat_generator'(Min, Max, G) ->
    ?'SIZED'(Size,
	     begin
	       MAX = if Max /= infinity -> Max;
			true -> Size
		     end,
	       ?'LET'(K,
		      if Min >= MAX -> Min;
			 true -> choose(Min, MAX)
		      end,
		      (vector(K, G)))
	     end).

-endif.

-ifdef('QC').

'__seq_generator'(Gs) -> '__do_seq_generator'(Gs, []).

-endif.

-ifdef('QC').

'__do_seq_generator'([], Acc) -> lists:reverse(Acc);
'__do_seq_generator'([H | T], Acc) ->
    ?'LET'(K, H, ('__do_seq_generator'(T, [K | Acc]))).

-endif.

-ifdef('QC').

'__terminals_oneof_generator'(Depth, Limit, AltsT,
			      Alts) ->
    ?'SIZED'(Size,
	     (?'LET'(Choose, (choose(0, Limit)),
		     case Depth of
		       Depth when Depth >= Size + Choose -> oneof(AltsT);
		       _ -> oneof(Alts)
		     end))).

-endif.
