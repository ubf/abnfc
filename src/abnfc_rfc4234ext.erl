%%% Do not modify this file, it is automatically generated by abnfc.
%%% All changes will be lost when it is regenerated.
%%% Generated by abnfc_gen on 2012-12-28 11:02:53

-module(abnfc_rfc4234ext).

-ifdef('QC').

-include_lib("qc/include/qc.hrl").

-endif.

-export([names/0]).

-export([alternation/0, 'bin-val'/0, 'c-nl'/0,
	 'c-wsp'/0, 'char-val'/0, comment/0, concatenation/0,
	 'cs-char-val'/0, 'dec-val'/0, decode/2, 'defined-as'/0,
	 element/0, elements/0, group/0, 'hex-val'/0,
	 'num-val'/0, option/0, 'prose-val'/0, repeat/0,
	 repetition/0, rule/0, rulelist/0, rulename/0]).

-ifdef('QC').

-export([alternation_generator/0, 'bin-val_generator'/0,
	 'c-nl_generator'/0, 'c-wsp_generator'/0,
	 'char-val_generator'/0, comment_generator/0,
	 concatenation_generator/0, 'cs-char-val_generator'/0,
	 'dec-val_generator'/0, 'defined-as_generator'/0,
	 element_generator/0, elements_generator/0, generator/1,
	 group_generator/0, 'hex-val_generator'/0,
	 'num-val_generator'/0, option_generator/0,
	 'prose-val_generator'/0, repeat_generator/0,
	 repetition_generator/0, rule_generator/0,
	 rulelist_generator/0, rulename_generator/0]).

-endif.

-include("abnfc_rfc4234ext.hrl").

names() ->
    [rulelist, rule, rulename, 'defined-as', elements,
     'c-wsp', 'c-nl', comment, alternation, concatenation,
     repetition, repeat, element, group, option, 'char-val',
     'cs-char-val', 'num-val', 'bin-val', 'dec-val',
     'hex-val', 'prose-val'].

decode(rulelist, Str) -> (rulelist())(Str);
decode(rule, Str) -> (rule())(Str);
decode(rulename, Str) -> (rulename())(Str);
decode('defined-as', Str) -> ('defined-as'())(Str);
decode(elements, Str) -> (elements())(Str);
decode('c-wsp', Str) -> ('c-wsp'())(Str);
decode('c-nl', Str) -> ('c-nl'())(Str);
decode(comment, Str) -> (comment())(Str);
decode(alternation, Str) -> (alternation())(Str);
decode(concatenation, Str) -> (concatenation())(Str);
decode(repetition, Str) -> (repetition())(Str);
decode(repeat, Str) -> (repeat())(Str);
decode(element, Str) -> (element())(Str);
decode(group, Str) -> (group())(Str);
decode(option, Str) -> (option())(Str);
decode('char-val', Str) -> ('char-val'())(Str);
decode('cs-char-val', Str) -> ('cs-char-val'())(Str);
decode('num-val', Str) -> ('num-val'())(Str);
decode('bin-val', Str) -> ('bin-val'())(Str);
decode('dec-val', Str) -> ('dec-val'())(Str);
decode('hex-val', Str) -> ('hex-val'())(Str);
decode('prose-val', Str) -> ('prose-val'())(Str).

-ifdef('QC').

generator(rulelist) -> rulelist_generator();
generator(rule) -> rule_generator();
generator(rulename) -> rulename_generator();
generator('defined-as') -> 'defined-as_generator'();
generator(elements) -> elements_generator();
generator('c-wsp') -> 'c-wsp_generator'();
generator('c-nl') -> 'c-nl_generator'();
generator(comment) -> comment_generator();
generator(alternation) -> alternation_generator();
generator(concatenation) -> concatenation_generator();
generator(repetition) -> repetition_generator();
generator(repeat) -> repeat_generator();
generator(element) -> element_generator();
generator(group) -> group_generator();
generator(option) -> option_generator();
generator('char-val') -> 'char-val_generator'();
generator('cs-char-val') -> 'cs-char-val_generator'();
generator('num-val') -> 'num-val_generator'();
generator('bin-val') -> 'bin-val_generator'();
generator('dec-val') -> 'dec-val_generator'();
generator('hex-val') -> 'hex-val_generator'();
generator('prose-val') -> 'prose-val_generator'().

-endif.

rulelist() ->
    fun (T) ->
	    __P = '__repeat'(1, infinity,
			     '__alt'([rule(),
				      '__seq'(['__repeat'(0, infinity, 'c-wsp'()),
					       'c-nl'()])])),
	    case __P(T) of
	      {ok, _YY, _T1} ->
		  try #rulelist{rules =
				    [Rule || Rule <- _YY, is_tuple(Rule)]}
		  of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

rule() ->
    fun (T) ->
	    __P = '__seq'([rulename(), 'defined-as'(), elements(),
			   '__repeat'(0, 1,
				      '__seq'(['__repeat'(0, infinity, 'WSP'()),
					       fun ([58 | Tl]) -> {ok, 58, Tl};
						   (_) -> fail
					       end,
					       '__repeat'(0, infinity, 'WSP'()),
					       erlangcode()])),
			   'c-nl'()]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3, _YY4, _YY5] = _YY, _T1} ->
		  try #rule{type = _YY2, name = element(2, _YY1),
			    body = _YY3,
			    code =
				case _YY4 of
				  [[_, _, _, Code]] -> Code;
				  [] -> nocode
				end}
		  of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

rulename() ->
    fun (T) ->
	    __P = '__seq'(['ALPHA'(),
			   '__repeat'(0, infinity,
				      '__alt'([fun ([C | Tl]) when C == 45 -> {ok, C, Tl};
						   (_) -> fail
					       end,
					       'ALPHA'(), 'DIGIT'()]))]),
	    case __P(T) of
	      {ok, [_YY1, _YY2] = _YY, _T1} ->
		  try #rulename{name = list_to_atom(lists:flatten(_YY))}
		  of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'defined-as'() ->
    fun (T) ->
	    __P = '__seq'(['__repeat'(0, infinity, 'c-wsp'()),
			   '__alt'([fun ([C | Tl]) when C == 61 -> {ok, C, Tl};
					(_) -> fail
				    end,
				    fun ([C1, C2 | Tl]) when C1 == 61, C2 == 47 ->
					    {ok, [C1, C2], Tl};
					(_) -> fail
				    end]),
			   '__repeat'(0, infinity, 'c-wsp'())]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3] = _YY, _T1} ->
		  try case _YY2 of
			$= -> def_rule;
			_ -> app_rule
		      end
		  of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

elements() ->
    fun (T) ->
	    __P = '__seq'([alternation(),
			   '__repeat'(0, infinity, 'c-wsp'())]),
	    case __P(T) of
	      {ok, [_YY1, _YY2] = _YY, _T1} -> {ok, _YY1, _T1};
	      fail -> fail
	    end
    end.

'c-wsp'() ->
    fun (T) ->
	    __P = '__alt'(['WSP'(), '__seq'(['c-nl'(), 'WSP'()])]),
	    case __P(T) of
	      {ok, _YY, _T1} -> {ok, 'c-wsp', _T1};
	      fail -> fail
	    end
    end.

'c-nl'() ->
    fun (T) ->
	    __P = '__alt'([comment(), 'CRLF'()]),
	    case __P(T) of
	      {ok, _YY, _T1} -> {ok, 'c-nl', _T1};
	      fail -> fail
	    end
    end.

comment() ->
    fun (T) ->
	    __P = '__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
			       (_) -> fail
			   end,
			   '__repeat'(0, infinity, '__alt'(['WSP'(), 'VCHAR'()])),
			   'CRLF'()]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3] = _YY, _T1} ->
		  {ok, comment, _T1};
	      fail -> fail
	    end
    end.

alternation() ->
    fun (T) ->
	    __P = '__seq'([concatenation(),
			   '__repeat'(0, infinity,
				      '__seq'(['__repeat'(0, infinity, 'c-wsp'()),
					       fun ([47 | Tl]) -> {ok, 47, Tl};
						   (_) -> fail
					       end,
					       '__repeat'(0, infinity, 'c-wsp'()),
					       concatenation()]))]),
	    case __P(T) of
	      {ok, [_YY1, _YY2] = _YY, _T1} ->
		  try case [Alt || [_, _, _, Alt] <- _YY2] of
			[] -> _YY1;
			Alts -> #alt{alts = [_YY1 | Alts]}
		      end
		  of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

concatenation() ->
    fun (T) ->
	    __P = '__seq'([repetition(),
			   '__repeat'(0, infinity,
				      '__seq'(['__repeat'(1, infinity, 'c-wsp'()),
					       repetition()]))]),
	    case __P(T) of
	      {ok, [_YY1, _YY2] = _YY, _T1} ->
		  try case [Rule || [_, Rule] <- _YY2] of
			[] -> _YY1;
			More -> #seq{elements = [_YY1 | More]}
		      end
		  of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

repetition() ->
    fun (T) ->
	    __P = '__seq'(['__repeat'(0, 1, repeat()), element()]),
	    case __P(T) of
	      {ok, [_YY1, _YY2] = _YY, _T1} ->
		  try case _YY1 of
			[{Min, Max}] ->
			    #repeat{min = Min, max = Max, body = _YY2};
			[] -> _YY2
		      end
		  of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

repeat() ->
    fun (T) ->
	    __P = '__alt'(['__seq'(['__repeat'(0, infinity,
					       'DIGIT'()),
				    fun ([42 | Tl]) -> {ok, 42, Tl};
					(_) -> fail
				    end,
				    '__repeat'(0, infinity, 'DIGIT'())]),
			   '__repeat'(1, infinity, 'DIGIT'())]),
	    case __P(T) of
	      {ok, _YY, _T1} ->
		  try case _YY of
			[[], $*, []] -> {0, infinity};
			[Min, $*, []] -> {list_to_integer(Min), infinity};
			[[], $*, Max] -> {0, list_to_integer(Max)};
			[Min, $*, Max] ->
			    {list_to_integer(Min), list_to_integer(Max)};
			Number ->
			    {list_to_integer(Number), list_to_integer(Number)}
		      end
		  of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

element() ->
    '__alt'([rulename(), group(), option(), 'char-val'(),
	     'cs-char-val'(), 'num-val'(), 'prose-val'()]).

group() ->
    fun (T) ->
	    __P = '__seq'([fun ([40 | Tl]) -> {ok, 40, Tl};
			       (_) -> fail
			   end,
			   '__repeat'(0, infinity, 'c-wsp'()), alternation(),
			   '__repeat'(0, infinity, 'c-wsp'()),
			   fun ([41 | Tl]) -> {ok, 41, Tl};
			       (_) -> fail
			   end]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3, _YY4, _YY5] = _YY, _T1} ->
		  {ok, _YY3, _T1};
	      fail -> fail
	    end
    end.

option() ->
    fun (T) ->
	    __P = '__seq'([fun ([91 | Tl]) -> {ok, 91, Tl};
			       (_) -> fail
			   end,
			   '__repeat'(0, infinity, 'c-wsp'()), alternation(),
			   '__repeat'(0, infinity, 'c-wsp'()),
			   fun ([93 | Tl]) -> {ok, 93, Tl};
			       (_) -> fail
			   end]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3, _YY4, _YY5] = _YY, _T1} ->
		  {ok, {repeat, 0, 1, _YY3}, _T1};
	      fail -> fail
	    end
    end.

'char-val'() ->
    fun (T) ->
	    __P = '__seq'(['DQUOTE'(),
			   '__repeat'(0, infinity,
				      fun ([C | Tl]) when (C >= 35) and (C =< 126) ->
					      {ok, C, Tl};
					  ([C | Tl]) when (C >= 32) and (C =< 33) ->
					      {ok, C, Tl};
					  (_) -> fail
				      end),
			   'DQUOTE'()]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3] = _YY, _T1} ->
		  try F = fun (Char) ->
				  case {string:to_lower(Char), string:to_upper(Char)} of
				    {Char, Char} -> #char_val{value = Char};
				    {Low, Up} ->
					#char_alt{alts =
						      [#char_val{value = Low},
						       #char_val{value = Up}]}
				  end
			  end,
		      case _YY2 of
			[C] -> F(C);
			Chars -> #char_seq{elements = [F(C) || C <- Chars]}
		      end
		  of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'cs-char-val'() ->
    fun (T) ->
	    __P = '__seq'(['SQUOTE'(),
			   '__repeat'(0, infinity,
				      fun ([C | Tl]) when (C >= 40) and (C =< 126) ->
					      {ok, C, Tl};
					  ([C | Tl]) when (C >= 32) and (C =< 38) ->
					      {ok, C, Tl};
					  (_) -> fail
				      end),
			   'SQUOTE'()]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3] = _YY, _T1} ->
		  try F = fun (Char) -> #char_val{value = Char} end,
		      case _YY2 of
			[C] -> F(C);
			Chars -> #char_seq{elements = [F(C) || C <- Chars]}
		      end
		  of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'num-val'() ->
    fun (T) ->
	    __P = '__seq'([fun ([37 | Tl]) -> {ok, 37, Tl};
			       (_) -> fail
			   end,
			   '__alt'(['bin-val'(), 'dec-val'(), 'hex-val'()])]),
	    case __P(T) of
	      {ok, [_YY1, _YY2] = _YY, _T1} -> {ok, _YY2, _T1};
	      fail -> fail
	    end
    end.

'bin-val'() ->
    fun (T) ->
	    __P = '__seq'([fun ([C | Tl]) when C == 98 ->
				   {ok, C, Tl};
			       ([C | Tl]) when C == 66 -> {ok, C, Tl};
			       (_) -> fail
			   end,
			   '__repeat'(1, infinity, 'BIT'()),
			   '__repeat'(0, 1,
				      '__alt'(['__repeat'(1, infinity,
							  '__seq'([fun ([46 | Tl]) ->
									   {ok, 46, Tl};
								       (_) -> fail
								   end,
								   '__repeat'(1, infinity,
									      'BIT'())])),
					       '__seq'([fun ([45 | Tl]) -> {ok, 45, Tl};
							    (_) -> fail
							end,
							'__repeat'(1, infinity,
								   'BIT'())])]))]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3] = _YY, _T1} ->
		  try First = bin_to_int(_YY2),
		      case _YY3 of
			[] -> #char_val{value = First};
			[[$-, To]] ->
			    #char_range{from = First, to = bin_to_int(To)};
			[Vals] ->
			    #char_seq{elements =
					  [#char_val{value = First} | [#char_val{value =
										     bin_to_int(Val)}
								       || [$., Val] <- Vals]]}
		      end
		  of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'dec-val'() ->
    fun (T) ->
	    __P = '__seq'([fun ([C | Tl]) when C == 100 ->
				   {ok, C, Tl};
			       ([C | Tl]) when C == 68 -> {ok, C, Tl};
			       (_) -> fail
			   end,
			   '__repeat'(1, infinity, 'DIGIT'()),
			   '__repeat'(0, 1,
				      '__alt'(['__repeat'(1, infinity,
							  '__seq'([fun ([46 | Tl]) ->
									   {ok, 46, Tl};
								       (_) -> fail
								   end,
								   '__repeat'(1, infinity,
									      'DIGIT'())])),
					       '__seq'([fun ([45 | Tl]) -> {ok, 45, Tl};
							    (_) -> fail
							end,
							'__repeat'(1, infinity,
								   'DIGIT'())])]))]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3] = _YY, _T1} ->
		  try First = list_to_integer(_YY2),
		      case _YY3 of
			[] -> #char_val{value = First};
			[[$-, To]] ->
			    #char_range{from = First, to = list_to_integer(To)};
			[Vals] ->
			    #char_seq{elements =
					  [#char_val{value = First} | [#char_val{value =
										     list_to_integer(Val)}
								       || [$., Val] <- Vals]]}
		      end
		  of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'hex-val'() ->
    fun (T) ->
	    __P = '__seq'([fun ([C | Tl]) when C == 120 ->
				   {ok, C, Tl};
			       ([C | Tl]) when C == 88 -> {ok, C, Tl};
			       (_) -> fail
			   end,
			   '__repeat'(1, infinity, 'HEXDIG'()),
			   '__repeat'(0, 1,
				      '__alt'(['__repeat'(1, infinity,
							  '__seq'([fun ([46 | Tl]) ->
									   {ok, 46, Tl};
								       (_) -> fail
								   end,
								   '__repeat'(1, infinity,
									      'HEXDIG'())])),
					       '__seq'([fun ([45 | Tl]) -> {ok, 45, Tl};
							    (_) -> fail
							end,
							'__repeat'(1, infinity,
								   'HEXDIG'())])]))]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3] = _YY, _T1} ->
		  try First = hex_to_int(_YY2),
		      case _YY3 of
			[] -> #char_val{value = First};
			[[$-, To]] ->
			    #char_range{from = First, to = hex_to_int(To)};
			[Vals] ->
			    #char_seq{elements =
					  [#char_val{value = First} | [#char_val{value =
										     hex_to_int(Val)}
								       || [$., Val] <- Vals]]}
		      end
		  of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'prose-val'() ->
    fun (T) ->
	    __P = '__seq'([fun ([60 | Tl]) -> {ok, 60, Tl};
			       (_) -> fail
			   end,
			   '__repeat'(0, infinity,
				      fun ([C | Tl]) when (C >= 63) and (C =< 126) ->
					      {ok, C, Tl};
					  ([C | Tl]) when (C >= 32) and (C =< 61) ->
					      {ok, C, Tl};
					  (_) -> fail
				      end),
			   fun ([62 | Tl]) -> {ok, 62, Tl};
			       (_) -> fail
			   end]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3] = _YY, _T1} ->
		  try {'prose-val', lists:flatten(_YY2)} of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

-ifdef('QC').

rulelist_generator() ->
    ?'LET'(V8,
	   (?'LET'(V7,
		   ('__repeat_generator'(1, infinity,
					 ?'LET'(V6,
						(oneof([?'SIZED'(V1,
								 (resize(if V1 > 0 -> V1 - 1;
									    true -> 0
									 end,
									 rule_generator()))),
							?'LET'(V5,
							       ('__seq_generator'([?'LET'(V3,
											  ('__repeat_generator'(0,
														infinity,
														?'SIZED'(V2,
															 (resize(if
																   V2
																     >
																     0 ->
																       V2
																	 -
																	 1;
																   true ->
																       0
																 end,
																 'c-wsp_generator'()))))),
											  V3),
										   ?'SIZED'(V4,
											    (resize(if
												      V4
													>
													0 ->
													  V4
													    -
													    1;
												      true ->
													  0
												    end,
												    'c-nl_generator'())))])),
							       V5)])),
						V6))),
		   V7)),
	   V8).

rule_generator() ->
    ?'LET'(V14,
	   (?'LET'(V13,
		   ('__seq_generator'([?'SIZED'(V1,
						(resize(if V1 > 0 -> V1 - 1;
							   true -> 0
							end,
							rulename_generator()))),
				       ?'SIZED'(V2,
						(resize(if V2 > 0 -> V2 - 1;
							   true -> 0
							end,
							'defined-as_generator'()))),
				       ?'SIZED'(V3,
						(resize(if V3 > 0 -> V3 - 1;
							   true -> 0
							end,
							elements_generator()))),
				       ?'LET'(V11,
					      ('__repeat_generator'(0, 1,
								    ?'LET'(V10,
									   ('__seq_generator'([?'LET'(V5,
												      ('__repeat_generator'(0,
															    infinity,
															    ?'SIZED'(V4,
																     (resize(if
																	       V4
																		 >
																		 0 ->
																		   V4
																		     -
																		     1;
																	       true ->
																		   0
																	     end,
																	     'WSP_generator'()))))),
												      V5),
											       ?'LET'(V6,
												      58,
												      V6),
											       ?'LET'(V8,
												      ('__repeat_generator'(0,
															    infinity,
															    ?'SIZED'(V7,
																     (resize(if
																	       V7
																		 >
																		 0 ->
																		   V7
																		     -
																		     1;
																	       true ->
																		   0
																	     end,
																	     'WSP_generator'()))))),
												      V8),
											       ?'SIZED'(V9,
													(resize(if
														  V9
														    >
														    0 ->
														      V9
															-
															1;
														  true ->
														      0
														end,
														erlangcode_generator())))])),
									   V10))),
					      V11),
				       ?'SIZED'(V12,
						(resize(if V12 > 0 -> V12 - 1;
							   true -> 0
							end,
							'c-nl_generator'())))])),
		   V13)),
	   V14).

rulename_generator() ->
    ?'LET'(V9,
	   (?'LET'(V8,
		   ('__seq_generator'([?'SIZED'(V1,
						(resize(if V1 > 0 -> V1 - 1;
							   true -> 0
							end,
							'ALPHA_generator'()))),
				       ?'LET'(V7,
					      ('__repeat_generator'(0, infinity,
								    ?'LET'(V6,
									   (oneof([?'LET'(V3,
											  (oneof([?'LET'(V2,
													 45,
													 V2)])),
											  V3),
										   ?'SIZED'(V4,
											    (resize(if
												      V4
													>
													0 ->
													  V4
													    -
													    1;
												      true ->
													  0
												    end,
												    'ALPHA_generator'()))),
										   ?'SIZED'(V5,
											    (resize(if
												      V5
													>
													0 ->
													  V5
													    -
													    1;
												      true ->
													  0
												    end,
												    'DIGIT_generator'())))])),
									   V6))),
					      V7)])),
		   V8)),
	   V9).

'defined-as_generator'() ->
    ?'LET'(V12,
	   (?'LET'(V11,
		   ('__seq_generator'([?'LET'(V2,
					      ('__repeat_generator'(0, infinity,
								    ?'SIZED'(V1,
									     (resize(if V1 >
											  0 ->
											    V1
											      -
											      1;
											true ->
											    0
										     end,
										     'c-wsp_generator'()))))),
					      V2),
				       ?'LET'(V8,
					      (oneof([?'LET'(V4, (oneof([?'LET'(V3, 61, V3)])),
							     V4),
						      ?'LET'(V7,
							     ('__seq_generator'([?'LET'(V5, 61,
											V5),
										 ?'LET'(V6, 47,
											V6)])),
							     V7)])),
					      V8),
				       ?'LET'(V10,
					      ('__repeat_generator'(0, infinity,
								    ?'SIZED'(V9,
									     (resize(if V9 >
											  0 ->
											    V9
											      -
											      1;
											true ->
											    0
										     end,
										     'c-wsp_generator'()))))),
					      V10)])),
		   V11)),
	   V12).

elements_generator() ->
    ?'LET'(V5,
	   (?'LET'(V4,
		   ('__seq_generator'([?'SIZED'(V1,
						(resize(if V1 > 0 -> V1 - 1;
							   true -> 0
							end,
							alternation_generator()))),
				       ?'LET'(V3,
					      ('__repeat_generator'(0, infinity,
								    ?'SIZED'(V2,
									     (resize(if V2 >
											  0 ->
											    V2
											      -
											      1;
											true ->
											    0
										     end,
										     'c-wsp_generator'()))))),
					      V3)])),
		   V4)),
	   V5).

'c-wsp_generator'() ->
    ?'LET'(V6,
	   (?'LET'(V5,
		   (oneof([?'SIZED'(V1,
				    (resize(if V1 > 0 -> V1 - 1;
					       true -> 0
					    end,
					    'WSP_generator'()))),
			   ?'LET'(V4,
				  ('__seq_generator'([?'SIZED'(V2,
							       (resize(if V2 > 0 -> V2 - 1;
									  true -> 0
								       end,
								       'c-nl_generator'()))),
						      ?'SIZED'(V3,
							       (resize(if V3 > 0 -> V3 - 1;
									  true -> 0
								       end,
								       'WSP_generator'())))])),
				  V4)])),
		   V5)),
	   V6).

'c-nl_generator'() ->
    ?'LET'(V4,
	   (?'LET'(V3,
		   (oneof([?'SIZED'(V1,
				    (resize(if V1 > 0 -> V1 - 1;
					       true -> 0
					    end,
					    comment_generator()))),
			   ?'SIZED'(V2,
				    (resize(if V2 > 0 -> V2 - 1;
					       true -> 0
					    end,
					    'CRLF_generator'())))])),
		   V3)),
	   V4).

comment_generator() ->
    ?'LET'(V8,
	   (?'LET'(V7,
		   ('__seq_generator'([?'LET'(V1, 59, V1),
				       ?'LET'(V5,
					      ('__repeat_generator'(0, infinity,
								    ?'LET'(V4,
									   (oneof([?'SIZED'(V2,
											    (resize(if
												      V2
													>
													0 ->
													  V2
													    -
													    1;
												      true ->
													  0
												    end,
												    'WSP_generator'()))),
										   ?'SIZED'(V3,
											    (resize(if
												      V3
													>
													0 ->
													  V3
													    -
													    1;
												      true ->
													  0
												    end,
												    'VCHAR_generator'())))])),
									   V4))),
					      V5),
				       ?'SIZED'(V6,
						(resize(if V6 > 0 -> V6 - 1;
							   true -> 0
							end,
							'CRLF_generator'())))])),
		   V7)),
	   V8).

alternation_generator() ->
    ?'LET'(V11,
	   (?'LET'(V10,
		   ('__seq_generator'([?'SIZED'(V1,
						(resize(if V1 > 0 -> V1 - 1;
							   true -> 0
							end,
							concatenation_generator()))),
				       ?'LET'(V9,
					      ('__repeat_generator'(0, infinity,
								    ?'LET'(V8,
									   ('__seq_generator'([?'LET'(V3,
												      ('__repeat_generator'(0,
															    infinity,
															    ?'SIZED'(V2,
																     (resize(if
																	       V2
																		 >
																		 0 ->
																		   V2
																		     -
																		     1;
																	       true ->
																		   0
																	     end,
																	     'c-wsp_generator'()))))),
												      V3),
											       ?'LET'(V4,
												      47,
												      V4),
											       ?'LET'(V6,
												      ('__repeat_generator'(0,
															    infinity,
															    ?'SIZED'(V5,
																     (resize(if
																	       V5
																		 >
																		 0 ->
																		   V5
																		     -
																		     1;
																	       true ->
																		   0
																	     end,
																	     'c-wsp_generator'()))))),
												      V6),
											       ?'SIZED'(V7,
													(resize(if
														  V7
														    >
														    0 ->
														      V7
															-
															1;
														  true ->
														      0
														end,
														concatenation_generator())))])),
									   V8))),
					      V9)])),
		   V10)),
	   V11).

concatenation_generator() ->
    ?'LET'(V8,
	   (?'LET'(V7,
		   ('__seq_generator'([?'SIZED'(V1,
						(resize(if V1 > 0 -> V1 - 1;
							   true -> 0
							end,
							repetition_generator()))),
				       ?'LET'(V6,
					      ('__repeat_generator'(0, infinity,
								    ?'LET'(V5,
									   ('__seq_generator'([?'LET'(V3,
												      ('__repeat_generator'(1,
															    infinity,
															    ?'SIZED'(V2,
																     (resize(if
																	       V2
																		 >
																		 0 ->
																		   V2
																		     -
																		     1;
																	       true ->
																		   0
																	     end,
																	     'c-wsp_generator'()))))),
												      V3),
											       ?'SIZED'(V4,
													(resize(if
														  V4
														    >
														    0 ->
														      V4
															-
															1;
														  true ->
														      0
														end,
														repetition_generator())))])),
									   V5))),
					      V6)])),
		   V7)),
	   V8).

repetition_generator() ->
    ?'LET'(V5,
	   (?'LET'(V4,
		   ('__seq_generator'([?'LET'(V2,
					      ('__repeat_generator'(0, 1,
								    ?'SIZED'(V1,
									     (resize(if V1 >
											  0 ->
											    V1
											      -
											      1;
											true ->
											    0
										     end,
										     repeat_generator()))))),
					      V2),
				       ?'SIZED'(V3,
						(resize(if V3 > 0 -> V3 - 1;
							   true -> 0
							end,
							element_generator())))])),
		   V4)),
	   V5).

repeat_generator() ->
    ?'LET'(V10,
	   (?'LET'(V9,
		   (oneof([?'LET'(V6,
				  ('__seq_generator'([?'LET'(V2,
							     ('__repeat_generator'(0, infinity,
										   ?'SIZED'(V1,
											    (resize(if
												      V1
													>
													0 ->
													  V1
													    -
													    1;
												      true ->
													  0
												    end,
												    'DIGIT_generator'()))))),
							     V2),
						      ?'LET'(V3, 42, V3),
						      ?'LET'(V5,
							     ('__repeat_generator'(0, infinity,
										   ?'SIZED'(V4,
											    (resize(if
												      V4
													>
													0 ->
													  V4
													    -
													    1;
												      true ->
													  0
												    end,
												    'DIGIT_generator'()))))),
							     V5)])),
				  V6),
			   ?'LET'(V8,
				  ('__repeat_generator'(1, infinity,
							?'SIZED'(V7,
								 (resize(if V7 > 0 -> V7 - 1;
									    true -> 0
									 end,
									 'DIGIT_generator'()))))),
				  V8)])),
		   V9)),
	   V10).

element_generator() ->
    ?'LET'(V9,
	   (?'LET'(V8,
		   (oneof([?'SIZED'(V1,
				    (resize(if V1 > 0 -> V1 - 1;
					       true -> 0
					    end,
					    rulename_generator()))),
			   ?'SIZED'(V2,
				    (resize(if V2 > 0 -> V2 - 1;
					       true -> 0
					    end,
					    group_generator()))),
			   ?'SIZED'(V3,
				    (resize(if V3 > 0 -> V3 - 1;
					       true -> 0
					    end,
					    option_generator()))),
			   ?'SIZED'(V4,
				    (resize(if V4 > 0 -> V4 - 1;
					       true -> 0
					    end,
					    'char-val_generator'()))),
			   ?'SIZED'(V5,
				    (resize(if V5 > 0 -> V5 - 1;
					       true -> 0
					    end,
					    'cs-char-val_generator'()))),
			   ?'SIZED'(V6,
				    (resize(if V6 > 0 -> V6 - 1;
					       true -> 0
					    end,
					    'num-val_generator'()))),
			   ?'SIZED'(V7,
				    (resize(if V7 > 0 -> V7 - 1;
					       true -> 0
					    end,
					    'prose-val_generator'())))])),
		   V8)),
	   V9).

group_generator() ->
    ?'LET'(V9,
	   (?'LET'(V8,
		   ('__seq_generator'([?'LET'(V1, 40, V1),
				       ?'LET'(V3,
					      ('__repeat_generator'(0, infinity,
								    ?'SIZED'(V2,
									     (resize(if V2 >
											  0 ->
											    V2
											      -
											      1;
											true ->
											    0
										     end,
										     'c-wsp_generator'()))))),
					      V3),
				       ?'SIZED'(V4,
						(resize(if V4 > 0 -> V4 - 1;
							   true -> 0
							end,
							alternation_generator()))),
				       ?'LET'(V6,
					      ('__repeat_generator'(0, infinity,
								    ?'SIZED'(V5,
									     (resize(if V5 >
											  0 ->
											    V5
											      -
											      1;
											true ->
											    0
										     end,
										     'c-wsp_generator'()))))),
					      V6),
				       ?'LET'(V7, 41, V7)])),
		   V8)),
	   V9).

option_generator() ->
    ?'LET'(V9,
	   (?'LET'(V8,
		   ('__seq_generator'([?'LET'(V1, 91, V1),
				       ?'LET'(V3,
					      ('__repeat_generator'(0, infinity,
								    ?'SIZED'(V2,
									     (resize(if V2 >
											  0 ->
											    V2
											      -
											      1;
											true ->
											    0
										     end,
										     'c-wsp_generator'()))))),
					      V3),
				       ?'SIZED'(V4,
						(resize(if V4 > 0 -> V4 - 1;
							   true -> 0
							end,
							alternation_generator()))),
				       ?'LET'(V6,
					      ('__repeat_generator'(0, infinity,
								    ?'SIZED'(V5,
									     (resize(if V5 >
											  0 ->
											    V5
											      -
											      1;
											true ->
											    0
										     end,
										     'c-wsp_generator'()))))),
					      V6),
				       ?'LET'(V7, 93, V7)])),
		   V8)),
	   V9).

'char-val_generator'() ->
    ?'LET'(V8,
	   (?'LET'(V7,
		   ('__seq_generator'([?'SIZED'(V1,
						(resize(if V1 > 0 -> V1 - 1;
							   true -> 0
							end,
							'DQUOTE_generator'()))),
				       ?'LET'(V5,
					      ('__repeat_generator'(0, infinity,
								    ?'LET'(V4,
									   (oneof([?'LET'(V2,
											  (choose(35,
												  126)),
											  V2),
										   ?'LET'(V3,
											  (choose(32,
												  33)),
											  V3)])),
									   V4))),
					      V5),
				       ?'SIZED'(V6,
						(resize(if V6 > 0 -> V6 - 1;
							   true -> 0
							end,
							'DQUOTE_generator'())))])),
		   V7)),
	   V8).

'cs-char-val_generator'() ->
    ?'LET'(V8,
	   (?'LET'(V7,
		   ('__seq_generator'([?'SIZED'(V1,
						(resize(if V1 > 0 -> V1 - 1;
							   true -> 0
							end,
							'SQUOTE_generator'()))),
				       ?'LET'(V5,
					      ('__repeat_generator'(0, infinity,
								    ?'LET'(V4,
									   (oneof([?'LET'(V2,
											  (choose(40,
												  126)),
											  V2),
										   ?'LET'(V3,
											  (choose(32,
												  38)),
											  V3)])),
									   V4))),
					      V5),
				       ?'SIZED'(V6,
						(resize(if V6 > 0 -> V6 - 1;
							   true -> 0
							end,
							'SQUOTE_generator'())))])),
		   V7)),
	   V8).

'num-val_generator'() ->
    ?'LET'(V7,
	   (?'LET'(V6,
		   ('__seq_generator'([?'LET'(V1, 37, V1),
				       ?'LET'(V5,
					      (oneof([?'SIZED'(V2,
							       (resize(if V2 > 0 -> V2 - 1;
									  true -> 0
								       end,
								       'bin-val_generator'()))),
						      ?'SIZED'(V3,
							       (resize(if V3 > 0 -> V3 - 1;
									  true -> 0
								       end,
								       'dec-val_generator'()))),
						      ?'SIZED'(V4,
							       (resize(if V4 > 0 -> V4 - 1;
									  true -> 0
								       end,
								       'hex-val_generator'())))])),
					      V5)])),
		   V6)),
	   V7).

'bin-val_generator'() ->
    ?'LET'(V18,
	   (?'LET'(V17,
		   ('__seq_generator'([?'LET'(V3,
					      (oneof([?'LET'(V1, 98, V1),
						      ?'LET'(V2, 66, V2)])),
					      V3),
				       ?'LET'(V5,
					      ('__repeat_generator'(1, infinity,
								    ?'SIZED'(V4,
									     (resize(if V4 >
											  0 ->
											    V4
											      -
											      1;
											true ->
											    0
										     end,
										     'BIT_generator'()))))),
					      V5),
				       ?'LET'(V16,
					      ('__repeat_generator'(0, 1,
								    ?'LET'(V15,
									   (oneof([?'LET'(V10,
											  ('__repeat_generator'(1,
														infinity,
														?'LET'(V9,
														       ('__seq_generator'([?'LET'(V6,
																		  46,
																		  V6),
																	   ?'LET'(V8,
																		  ('__repeat_generator'(1,
																					infinity,
																					?'SIZED'(V7,
																						 (resize(if
																							   V7
																							     >
																							     0 ->
																							       V7
																								 -
																								 1;
																							   true ->
																							       0
																							 end,
																							 'BIT_generator'()))))),
																		  V8)])),
														       V9))),
											  V10),
										   ?'LET'(V14,
											  ('__seq_generator'([?'LET'(V11,
														     45,
														     V11),
													      ?'LET'(V13,
														     ('__repeat_generator'(1,
																	   infinity,
																	   ?'SIZED'(V12,
																		    (resize(if
																			      V12
																				>
																				0 ->
																				  V12
																				    -
																				    1;
																			      true ->
																				  0
																			    end,
																			    'BIT_generator'()))))),
														     V13)])),
											  V14)])),
									   V15))),
					      V16)])),
		   V17)),
	   V18).

'dec-val_generator'() ->
    ?'LET'(V18,
	   (?'LET'(V17,
		   ('__seq_generator'([?'LET'(V3,
					      (oneof([?'LET'(V1, 100, V1),
						      ?'LET'(V2, 68, V2)])),
					      V3),
				       ?'LET'(V5,
					      ('__repeat_generator'(1, infinity,
								    ?'SIZED'(V4,
									     (resize(if V4 >
											  0 ->
											    V4
											      -
											      1;
											true ->
											    0
										     end,
										     'DIGIT_generator'()))))),
					      V5),
				       ?'LET'(V16,
					      ('__repeat_generator'(0, 1,
								    ?'LET'(V15,
									   (oneof([?'LET'(V10,
											  ('__repeat_generator'(1,
														infinity,
														?'LET'(V9,
														       ('__seq_generator'([?'LET'(V6,
																		  46,
																		  V6),
																	   ?'LET'(V8,
																		  ('__repeat_generator'(1,
																					infinity,
																					?'SIZED'(V7,
																						 (resize(if
																							   V7
																							     >
																							     0 ->
																							       V7
																								 -
																								 1;
																							   true ->
																							       0
																							 end,
																							 'DIGIT_generator'()))))),
																		  V8)])),
														       V9))),
											  V10),
										   ?'LET'(V14,
											  ('__seq_generator'([?'LET'(V11,
														     45,
														     V11),
													      ?'LET'(V13,
														     ('__repeat_generator'(1,
																	   infinity,
																	   ?'SIZED'(V12,
																		    (resize(if
																			      V12
																				>
																				0 ->
																				  V12
																				    -
																				    1;
																			      true ->
																				  0
																			    end,
																			    'DIGIT_generator'()))))),
														     V13)])),
											  V14)])),
									   V15))),
					      V16)])),
		   V17)),
	   V18).

'hex-val_generator'() ->
    ?'LET'(V18,
	   (?'LET'(V17,
		   ('__seq_generator'([?'LET'(V3,
					      (oneof([?'LET'(V1, 120, V1),
						      ?'LET'(V2, 88, V2)])),
					      V3),
				       ?'LET'(V5,
					      ('__repeat_generator'(1, infinity,
								    ?'SIZED'(V4,
									     (resize(if V4 >
											  0 ->
											    V4
											      -
											      1;
											true ->
											    0
										     end,
										     'HEXDIG_generator'()))))),
					      V5),
				       ?'LET'(V16,
					      ('__repeat_generator'(0, 1,
								    ?'LET'(V15,
									   (oneof([?'LET'(V10,
											  ('__repeat_generator'(1,
														infinity,
														?'LET'(V9,
														       ('__seq_generator'([?'LET'(V6,
																		  46,
																		  V6),
																	   ?'LET'(V8,
																		  ('__repeat_generator'(1,
																					infinity,
																					?'SIZED'(V7,
																						 (resize(if
																							   V7
																							     >
																							     0 ->
																							       V7
																								 -
																								 1;
																							   true ->
																							       0
																							 end,
																							 'HEXDIG_generator'()))))),
																		  V8)])),
														       V9))),
											  V10),
										   ?'LET'(V14,
											  ('__seq_generator'([?'LET'(V11,
														     45,
														     V11),
													      ?'LET'(V13,
														     ('__repeat_generator'(1,
																	   infinity,
																	   ?'SIZED'(V12,
																		    (resize(if
																			      V12
																				>
																				0 ->
																				  V12
																				    -
																				    1;
																			      true ->
																				  0
																			    end,
																			    'HEXDIG_generator'()))))),
														     V13)])),
											  V14)])),
									   V15))),
					      V16)])),
		   V17)),
	   V18).

'prose-val_generator'() ->
    ?'LET'(V8,
	   (?'LET'(V7,
		   ('__seq_generator'([?'LET'(V1, 60, V1),
				       ?'LET'(V5,
					      ('__repeat_generator'(0, infinity,
								    ?'LET'(V4,
									   (oneof([?'LET'(V2,
											  (choose(63,
												  126)),
											  V2),
										   ?'LET'(V3,
											  (choose(32,
												  61)),
											  V3)])),
									   V4))),
					      V5),
				       ?'LET'(V6, 62, V6)])),
		   V7)),
	   V8).

-endif.

'__alt'(Ps) -> fun (T) -> '__do_alt'(Ps, T) end.

'__do_alt'([P | Ps], T) ->
    case P(T) of
      {ok, _R, _T1} = Res -> Res;
      fail -> '__do_alt'(Ps, T)
    end;
'__do_alt'([], _) -> fail.

'__repeat'(Min, Max, P) -> '__repeat'(Min, Max, P, 0).

'__repeat'(Min, Max, P, Found) ->
    fun (T) -> '__do_repeat'(Min, Max, P, Found, T) end.

'__do_repeat'(Min, Max, P, Found, T) ->
    case P(T) of
      {ok, R1, T1} when Max == Found + 1 -> {ok, [R1], T1};
      {ok, R1, T1} ->
	  case '__do_repeat'(Min, Max, P, Found + 1, T1) of
	    {ok, R2, T2} -> {ok, [R1 | R2], T2};
	    fail when Found >= Min -> {ok, [R1], T1};
	    fail -> fail
	  end;
      fail when Found >= Min -> {ok, [], T};
      fail -> fail
    end.

'__seq'(Ps) -> fun (T) -> '__do_seq'(Ps, T) end.

'__do_seq'([P | Ps], T) ->
    case P(T) of
      {ok, R1, T1} ->
	  case '__do_seq'(Ps, T1) of
	    {ok, R2, T2} -> {ok, [R1 | R2], T2};
	    fail -> fail
	  end;
      fail -> fail
    end;
'__do_seq'([], T) -> {ok, [], T}.

-ifdef('QC').

'__repeat_generator'(Min, Max, G) ->
    ?'SIZED'(Size,
	     begin
	       MAX = if Max /= infinity -> Max;
			true -> Size
		     end,
	       ?'LET'(K,
		      if Min >= MAX -> Min;
			 true -> choose(Min, MAX)
		      end,
		      (vector(K, G)))
	     end).

-endif.

-ifdef('QC').

'__seq_generator'(Gs) -> '__do_seq_generator'(Gs, []).

-endif.

-ifdef('QC').

'__do_seq_generator'([], Acc) -> lists:reverse(Acc);
'__do_seq_generator'([H | T], Acc) ->
    ?'LET'(K, H, ('__do_seq_generator'(T, [K | Acc]))).

-endif.
